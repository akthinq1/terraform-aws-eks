// created pipeline for creating AWS SG
// agent, environment
// options => timeout and ansiColor, disableConcurrentBuilds()
// stages => inti, plan, apply, Destroy(not mandatory)
// create downstream for security group => trigger SG
// propagate, wait in downstream
// use input before going to create => it's like permission or confirmations
// parallel and sequential triggering

pipeline{
    agent{
        label "AGENT-1"
    }

    environment{
        REGION = "us-east-1"
        ACC_ID = "741005748171"
        PROJECT = "roboshop"
        COMPONENT = "catalogue"
    }

    options{
        timeout(time: 30, unit: 'MINUTES') 
        ansiColor('xterm')
        disableConcurrentBuilds()
    }

    // parameters{

    // }

    stages {

        // init terraform using aws creds
        stage('init'){
            steps{
                script{
                    withAWS(credentials: 'aws-auth', region: 'us-east-1'){
                         sh """
                            cd 10-sg
                            terraform init -reconfigure
                        """
                    }

                }
            }
        }

        // terraform plan
        stage('plan'){
            steps{
                script{
                    withAWS(credentials: 'aws-auth', region: 'us-east-1'){
                         sh """
                            cd 10-sg
                            terraform plan
                        """
                    }

                }
            }
        }

        // terraform apply
        stage('apply'){
            // input {
            //     message "Should we continue?"
            //     ok "Yes, we should."
            //     submitter "alice,anil"
            // } 

            steps{
                script{
                    withAWS(credentials: 'aws-auth', region: 'us-east-1'){
                         sh """
                            cd 10-sg
                            terraform apply -auto-approve
                        """
                    }

                }
            }
        }

        // stage('destroy'){
        //     input {
        //         message "Should we continue?"
        //         ok "Yes, we should."
        //         submitter "alice,anil"
        //     } 

        //     steps{
        //         script{
        //             withAWS(credentials: 'aws-auth', region: 'us-east-1'){
        //                  sh """
        //                     cd 00-vpc
        //                     terraform destroy -auto-approve
        //                 """
        //             }

        //         }
        //     }
        // }

        // create a downstream job
        // parallel and sequential triggering
        
        stage('Bastion ACM ALB EKS'){
            parallel{
                stage('Trigger Bastion'){
                    steps{
                        script{
                            build job: '20-bastion-host',
                            propagate: false, 
                            wait: false 
                        }
                    }
                }

                stage('Trigger ACM'){
                    steps{
                        script{
                            build job: '60-acm',
                            propagate: false, 
                            wait: false 
                        }
                    }
                }

                stage('Trigger EKS'){
                    steps{
                        script{
                            build job: '80-eks',
                            propagate: false, 
                            wait: false 
                        }
                    }
                }                
            }         
        }

        stage('Trigger ALB'){
            steps{
                script{
                    build job: '70-ingress-alb',
                    propagate: false, 
                    wait: false 
                }
            }
        }
    }
}